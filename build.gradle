plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.epages.restdocs-api-spec" version "0.18.2"
}

group = 'com'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

ext {
    set("snippetsDir", file("build/generated-snippets"))
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {

    //springboot
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //data
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.5.1' // For @Type(JsonType.class)

    //testcontainers
    testImplementation "org.testcontainers:testcontainers:1.19.0"
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"
    testImplementation "org.testcontainers:mariadb:1.19.0"

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //restdocs
    asciidoctorExt("org.springframework.restdocs:spring-restdocs-asciidoctor")
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation("com.epages:restdocs-api-spec-mockmvc:0.18.2")
}

tasks.named('test') {
    useJUnitPlatform()
}
jar.enabled = false

// asciidoctor start
asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    sources {
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile()
    dependsOn test
}

asciidoctor.doFirst {
    delete file("src/main/resources/static/docs")
}
// asciidoctor end

openapi3 {
    servers = [
            { url = 'https://api.pcmk.dppr.me' },
            { url = 'http://localhost:8080' }
    ]
    title = 'Project Convention Maker API'
    description = '에러 코드는 `/docs/index.html`에서 확인하세요'
    version = "${project.version}"
    format = 'yaml'
}

tasks.register('copyOasToSwagger', Copy) {
    dependsOn("openapi3");
    delete("src/main/resources/static/swagger-ui/openapi3.yaml");
    from("build/api-spec/openapi3.yaml");
    into("src/main/resources/static/swagger-ui/.");
}

bootJar {
    dependsOn asciidoctor
    copy {
        from asciidoctor.outputDir
        into "src/main/resources/static/docs"
    }
    archiveFileName.set "application.jar"
}